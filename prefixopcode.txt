uint8_t time = prefixTimings[opCode];
switch(opCode){
	case 0x00: {
		// RLC B
		// Flags: Z00C
		rlc(RegBC.hi);
		std::cout<<"RLC B"<<std::endl;
	}
	break;
	case 0x01: {
		// RLC C
		// Flags: Z00C
		rlc(RegBC.lo);
		std::cout<<"RLC C"<<std::endl;
	}
	break;
	case 0x02: {
		// RLC D
		// Flags: Z00C
		rlc(RegDE.hi);
		std::cout<<"RLC D"<<std::endl;
	}
	break;
	case 0x03: {
		// RLC E
		// Flags: Z00C
		rlc(RegDE.lo);
		std::cout<<"RLC E"<<std::endl;
	}
	break;
	case 0x04: {
		// RLC H
		// Flags: Z00C
		rlc(RegHL.hi);
		std::cout<<"RLC H"<<std::endl;
	}
	break;
	case 0x05: {
		// RLC L
		// Flags: Z00C
		rlc(RegHL.lo);
		std::cout<<"RLC L"<<std::endl;
	}
	break;
	case 0x06: {
		// RLC (HL)
		// Flags: Z00C
		uint8_t hlVal = memory->readByte(RegHL.reg);
		rlc(hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RLC (HL)"<<std::endl;
	}
	break;
	case 0x07: {
		// RLC A
		// Flags: Z00C
		rlc(RegAF.hi);
		std::cout<<"RLC A"<<std::endl;
	}
	break;
	case 0x08: {
		// RRC B
		// Flags: Z00C
		rrc(RegBC.hi);
		std::cout<<"RRC B"<<std::endl;
	}
	break;
	case 0x09: {
		// RRC C
		// Flags: Z00C
		rrc(RegBC.lo);
		std::cout<<"RRC C"<<std::endl;
	}
	break;
	case 0x0a: {
		// RRC D
		// Flags: Z00C
		rrc(RegDE.hi);
		std::cout<<"RRC D"<<std::endl;
	}
	break;
	case 0x0b: {
		// RRC E
		// Flags: Z00C
		rrc(RegDE.lo);
		std::cout<<"RRC E"<<std::endl;
	}
	break;
	case 0x0c: {
		// RRC H
		// Flags: Z00C
		rrc(RegHL.hi);
		std::cout<<"RRC H"<<std::endl;
	}
	break;
	case 0x0d: {
		// RRC L
		// Flags: Z00C
		rrc(RegHL.lo);
		std::cout<<"RRC L"<<std::endl;
	}
	break;
	case 0x0e: {
		// RRC (HL)
		// Flags: Z00C
		uint8_t hlVal = memory->readByte(RegHL.reg);
		rrc(hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RRC (HL)"<<std::endl;
	}
	break;
	case 0x0f: {
		// RRC A
		// Flags: Z00C
		rrc(RegAF.hi);
		std::cout<<"RRC A"<<std::endl;
	}
	break;
	case 0x10: {
		// RL B
		// Flags: Z00C
		rl(RegBC.hi);
		std::cout<<"RL B"<<std::endl;
	}
	break;
	case 0x11: {
		// RL C
		// Flags: Z00C
		rl(RegBC.lo);
		std::cout<<"RL C"<<std::endl;
	}
	break;
	case 0x12: {
		// RL D
		// Flags: Z00C
		rl(RegDE.hi);
		std::cout<<"RL D"<<std::endl;
	}
	break;
	case 0x13: {
		// RL E
		// Flags: Z00C
		rl(RegDE.lo);
		std::cout<<"RL E"<<std::endl;
	}
	break;
	case 0x14: {
		// RL H
		// Flags: Z00C
		rl(RegHL.hi);
		std::cout<<"RL H"<<std::endl;
	}
	break;
	case 0x15: {
		// RL L
		// Flags: Z00C
		rl(RegHL.lo);
		std::cout<<"RL L"<<std::endl;
	}
	break;
	case 0x16: {
		// RL (HL)
		// Flags: Z00C
		uint8_t hlVal = memory->readByte(RegHL.reg);
		rl(hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RL (HL)"<<std::endl;
	}
	break;
	case 0x17: {
		// RL A
		// Flags: Z00C
		rl(RegAF.hi);
		std::cout<<"RL A"<<std::endl;
	}
	break;
	case 0x18: {
		// RR B
		// Flags: Z00C
		rr(RegBC.hi);
		std::cout<<"RR B"<<std::endl;
	}
	break;
	case 0x19: {
		// RR C
		// Flags: Z00C
		rr(RegBC.lo);
		std::cout<<"RR C"<<std::endl;
	}
	break;
	case 0x1a: {
		// RR D
		// Flags: Z00C
		rr(RegDE.hi);
		std::cout<<"RR D"<<std::endl;
	}
	break;
	case 0x1b: {
		// RR E
		// Flags: Z00C
		rr(RegDE.lo);
		std::cout<<"RR E"<<std::endl;
	}
	break;
	case 0x1c: {
		// RR H
		// Flags: Z00C
		rr(RegHL.hi);
		std::cout<<"RR H"<<std::endl;
	}
	break;
	case 0x1d: {
		// RR L
		// Flags: Z00C
		rr(RegHL.lo);
		std::cout<<"RR L"<<std::endl;
	}
	break;
	case 0x1e: {
		// RR (HL)
		// Flags: Z00C
		uint8_t hlVal = memory->readByte(RegHL.reg);
		rr(hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RR (HL)"<<std::endl;
	}
	break;
	case 0x1f: {
		// RR A
		// Flags: Z00C
		rr(RegAF.hi);
		std::cout<<"RR A"<<std::endl;
	}
	break;
	case 0x20: {
		// SLA B
		// Flags: Z00C
		sla(RegBC.hi);
		std::cout<<"SLA B"<<std::endl;
	}
	break;
	case 0x21: {
		// SLA C
		// Flags: Z00C
		sla(RegBC.lo);
		std::cout<<"SLA C"<<std::endl;
	}
	break;
	case 0x22: {
		// SLA D
		// Flags: Z00C
		sla(RegDE.hi);
		std::cout<<"SLA D"<<std::endl;
	}
	break;
	case 0x23: {
		// SLA E
		// Flags: Z00C
		sla(RegDE.lo);
		std::cout<<"SLA E"<<std::endl;
	}
	break;
	case 0x24: {
		// SLA H
		// Flags: Z00C
		sla(RegHL.hi);
		std::cout<<"SLA H"<<std::endl;
	}
	break;
	case 0x25: {
		// SLA L
		// Flags: Z00C
		sla(RegHL.lo);
		std::cout<<"SLA L"<<std::endl;
	}
	break;
	case 0x26: {
		// SLA (HL)
		// Flags: Z00C
		uint8_t hlVal = memory->readByte(RegHL.reg);
		sla(hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SLA (HL)"<<std::endl;
	}
	break;
	case 0x27: {
		// SLA A
		// Flags: Z00C
		sla(RegAF.hi);
		std::cout<<"SLA A"<<std::endl;
	}
	break;
	case 0x28: {
		// SRA B
		// Flags: Z00C
		sra(RegBC.hi);
		std::cout<<"SRA B"<<std::endl;
	}
	break;
	case 0x29: {
		// SRA C
		// Flags: Z00C
		sra(RegBC.lo);
		std::cout<<"SRA C"<<std::endl;
	}
	break;
	case 0x2a: {
		// SRA D
		// Flags: Z00C
		sra(RegDE.hi);
		std::cout<<"SRA D"<<std::endl;
	}
	break;
	case 0x2b: {
		// SRA E
		// Flags: Z00C
		sra(RegDE.lo);
		std::cout<<"SRA E"<<std::endl;
	}
	break;
	case 0x2c: {
		// SRA H
		// Flags: Z00C
		sra(RegHL.hi);
		std::cout<<"SRA H"<<std::endl;
	}
	break;
	case 0x2d: {
		// SRA L
		// Flags: Z00C
		sra(RegHL.lo);
		std::cout<<"SRA L"<<std::endl;
	}
	break;
	case 0x2e: {
		// SRA (HL)
		// Flags: Z00C
		uint8_t hlVal = memory->readByte(RegHL.reg);
		sra(hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SRA (HL)"<<std::endl;
	}
	break;
	case 0x2f: {
		// SRA A
		// Flags: Z00C
		sra(RegAF.hi);
		std::cout<<"SRA A"<<std::endl;
	}
	break;
	case 0x30: {
		// SWAP B
		// Flags: Z000
		swap(RegBC.hi);
		std::cout<<"SWAP B"<<std::endl;
	}
	break;
	case 0x31: {
		// SWAP C
		// Flags: Z000
		swap(RegBC.lo);
		std::cout<<"SWAP C"<<std::endl;
	}
	break;
	case 0x32: {
		// SWAP D
		// Flags: Z000
		swap(RegDE.hi);
		std::cout<<"SWAP D"<<std::endl;
	}
	break;
	case 0x33: {
		// SWAP E
		// Flags: Z000
		swap(RegDE.lo);
		std::cout<<"SWAP E"<<std::endl;
	}
	break;
	case 0x34: {
		// SWAP H
		// Flags: Z000
		swap(RegHL.hi);
		std::cout<<"SWAP H"<<std::endl;
	}
	break;
	case 0x35: {
		// SWAP L
		// Flags: Z000
		swap(RegHL.lo);
		std::cout<<"SWAP L"<<std::endl;
	}
	break;
	case 0x36: {
		// SWAP (HL)
		// Flags: Z000
		uint8_t hlVal = memory->readByte(RegHL.reg);
		swap(hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SWAP (HL)"<<std::endl;
	}
	break;
	case 0x37: {
		// SWAP A
		// Flags: Z000
		swap(RegAF.hi);
		std::cout<<"SWAP A"<<std::endl;
	}
	break;
	case 0x38: {
		// SRL B
		// Flags: Z00C
		srl(RegBC.hi);
		std::cout<<"SRL B"<<std::endl;
	}
	break;
	case 0x39: {
		// SRL C
		// Flags: Z00C
		srl(RegBC.lo);
		std::cout<<"SRL C"<<std::endl;
	}
	break;
	case 0x3a: {
		// SRL D
		// Flags: Z00C
		srl(RegDE.hi);
		std::cout<<"SRL D"<<std::endl;
	}
	break;
	case 0x3b: {
		// SRL E
		// Flags: Z00C
		srl(RegDE.lo);
		std::cout<<"SRL E"<<std::endl;
	}
	break;
	case 0x3c: {
		// SRL H
		// Flags: Z00C
		srl(RegHL.hi);
		std::cout<<"SRL H"<<std::endl;
	}
	break;
	case 0x3d: {
		// SRL L
		// Flags: Z00C
		srl(RegHL.lo);
		std::cout<<"SRL L"<<std::endl;
	}
	break;
	case 0x3e: {
		// SRL (HL)
		// Flags: Z00C
		uint8_t hlVal = memory->readByte(RegHL.reg);
		srl(hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SRL (HL)"<<std::endl;
	}
	break;
	case 0x3f: {
		// SRL A
		// Flags: Z00C
		srl(RegAF.hi);
		std::cout<<"SRL A"<<std::endl;
	}
	break;
	case 0x40: {
		// BIT 0, B
		// Flags: Z01-
		bit(0, RegBC.hi);
		std::cout<<"BIT 0, B"<<std::endl;
	}
	break;
	case 0x41: {
		// BIT 0, C
		// Flags: Z01-
		bit(0, RegBC.lo);
		std::cout<<"BIT 0, C"<<std::endl;
	}
	break;
	case 0x42: {
		// BIT 0, D
		// Flags: Z01-
		bit(0, RegDE.hi);
		std::cout<<"BIT 0, D"<<std::endl;
	}
	break;
	case 0x43: {
		// BIT 0, E
		// Flags: Z01-
		bit(0, RegDE.lo);
		std::cout<<"BIT 0, E"<<std::endl;
	}
	break;
	case 0x44: {
		// BIT 0, H
		// Flags: Z01-
		bit(0, RegHL.hi);
		std::cout<<"BIT 0, H"<<std::endl;
	}
	break;
	case 0x45: {
		// BIT 0, L
		// Flags: Z01-
		bit(0, RegHL.lo);
		std::cout<<"BIT 0, L"<<std::endl;
	}
	break;
	case 0x46: {
		// BIT 0, (HL)
		// Flags: Z01-
		uint8_t hlVal = memory->readByte(RegHL.reg);
		bit(0, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"BIT 0, (HL)"<<std::endl;
	}
	break;
	case 0x47: {
		// BIT 0, A
		// Flags: Z01-
		bit(0, RegAF.hi);
		std::cout<<"BIT 0, A"<<std::endl;
	}
	break;
	case 0x48: {
		// BIT 1, B
		// Flags: Z01-
		bit(1, RegBC.hi);
		std::cout<<"BIT 1, B"<<std::endl;
	}
	break;
	case 0x49: {
		// BIT 1, C
		// Flags: Z01-
		bit(1, RegBC.lo);
		std::cout<<"BIT 1, C"<<std::endl;
	}
	break;
	case 0x4a: {
		// BIT 1, D
		// Flags: Z01-
		bit(1, RegDE.hi);
		std::cout<<"BIT 1, D"<<std::endl;
	}
	break;
	case 0x4b: {
		// BIT 1, E
		// Flags: Z01-
		bit(1, RegDE.lo);
		std::cout<<"BIT 1, E"<<std::endl;
	}
	break;
	case 0x4c: {
		// BIT 1, H
		// Flags: Z01-
		bit(1, RegHL.hi);
		std::cout<<"BIT 1, H"<<std::endl;
	}
	break;
	case 0x4d: {
		// BIT 1, L
		// Flags: Z01-
		bit(1, RegHL.lo);
		std::cout<<"BIT 1, L"<<std::endl;
	}
	break;
	case 0x4e: {
		// BIT 1, (HL)
		// Flags: Z01-
		uint8_t hlVal = memory->readByte(RegHL.reg);
		bit(1, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"BIT 1, (HL)"<<std::endl;
	}
	break;
	case 0x4f: {
		// BIT 1, A
		// Flags: Z01-
		bit(1, RegAF.hi);
		std::cout<<"BIT 1, A"<<std::endl;
	}
	break;
	case 0x50: {
		// BIT 2, B
		// Flags: Z01-
		bit(2, RegBC.hi);
		std::cout<<"BIT 2, B"<<std::endl;
	}
	break;
	case 0x51: {
		// BIT 2, C
		// Flags: Z01-
		bit(2, RegBC.lo);
		std::cout<<"BIT 2, C"<<std::endl;
	}
	break;
	case 0x52: {
		// BIT 2, D
		// Flags: Z01-
		bit(2, RegDE.hi);
		std::cout<<"BIT 2, D"<<std::endl;
	}
	break;
	case 0x53: {
		// BIT 2, E
		// Flags: Z01-
		bit(2, RegDE.lo);
		std::cout<<"BIT 2, E"<<std::endl;
	}
	break;
	case 0x54: {
		// BIT 2, H
		// Flags: Z01-
		bit(2, RegHL.hi);
		std::cout<<"BIT 2, H"<<std::endl;
	}
	break;
	case 0x55: {
		// BIT 2, L
		// Flags: Z01-
		bit(2, RegHL.lo);
		std::cout<<"BIT 2, L"<<std::endl;
	}
	break;
	case 0x56: {
		// BIT 2, (HL)
		// Flags: Z01-
		uint8_t hlVal = memory->readByte(RegHL.reg);
		bit(2, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"BIT 2, (HL)"<<std::endl;
	}
	break;
	case 0x57: {
		// BIT 2, A
		// Flags: Z01-
		bit(2, RegAF.hi);
		std::cout<<"BIT 2, A"<<std::endl;
	}
	break;
	case 0x58: {
		// BIT 3, B
		// Flags: Z01-
		bit(3, RegBC.hi);
		std::cout<<"BIT 3, B"<<std::endl;
	}
	break;
	case 0x59: {
		// BIT 3, C
		// Flags: Z01-
		bit(3, RegBC.lo);
		std::cout<<"BIT 3, C"<<std::endl;
	}
	break;
	case 0x5a: {
		// BIT 3, D
		// Flags: Z01-
		bit(3, RegDE.hi);
		std::cout<<"BIT 3, D"<<std::endl;
	}
	break;
	case 0x5b: {
		// BIT 3, E
		// Flags: Z01-
		bit(3, RegDE.lo);
		std::cout<<"BIT 3, E"<<std::endl;
	}
	break;
	case 0x5c: {
		// BIT 3, H
		// Flags: Z01-
		bit(3, RegHL.hi);
		std::cout<<"BIT 3, H"<<std::endl;
	}
	break;
	case 0x5d: {
		// BIT 3, L
		// Flags: Z01-
		bit(3, RegHL.lo);
		std::cout<<"BIT 3, L"<<std::endl;
	}
	break;
	case 0x5e: {
		// BIT 3, (HL)
		// Flags: Z01-
		uint8_t hlVal = memory->readByte(RegHL.reg);
		bit(3, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"BIT 3, (HL)"<<std::endl;
	}
	break;
	case 0x5f: {
		// BIT 3, A
		// Flags: Z01-
		bit(3, RegAF.hi);
		std::cout<<"BIT 3, A"<<std::endl;
	}
	break;
	case 0x60: {
		// BIT 4, B
		// Flags: Z01-
		bit(4, RegBC.hi);
		std::cout<<"BIT 4, B"<<std::endl;
	}
	break;
	case 0x61: {
		// BIT 4, C
		// Flags: Z01-
		bit(4, RegBC.lo);
		std::cout<<"BIT 4, C"<<std::endl;
	}
	break;
	case 0x62: {
		// BIT 4, D
		// Flags: Z01-
		bit(4, RegDE.hi);
		std::cout<<"BIT 4, D"<<std::endl;
	}
	break;
	case 0x63: {
		// BIT 4, E
		// Flags: Z01-
		bit(4, RegDE.lo);
		std::cout<<"BIT 4, E"<<std::endl;
	}
	break;
	case 0x64: {
		// BIT 4, H
		// Flags: Z01-
		bit(4, RegHL.hi);
		std::cout<<"BIT 4, H"<<std::endl;
	}
	break;
	case 0x65: {
		// BIT 4, L
		// Flags: Z01-
		bit(4, RegHL.lo);
		std::cout<<"BIT 4, L"<<std::endl;
	}
	break;
	case 0x66: {
		// BIT 4, (HL)
		// Flags: Z01-
		uint8_t hlVal = memory->readByte(RegHL.reg);
		bit(4, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"BIT 4, (HL)"<<std::endl;
	}
	break;
	case 0x67: {
		// BIT 4, A
		// Flags: Z01-
		bit(4, RegAF.hi);
		std::cout<<"BIT 4, A"<<std::endl;
	}
	break;
	case 0x68: {
		// BIT 5, B
		// Flags: Z01-
		bit(5, RegBC.hi);
		std::cout<<"BIT 5, B"<<std::endl;
	}
	break;
	case 0x69: {
		// BIT 5, C
		// Flags: Z01-
		bit(5, RegBC.lo);
		std::cout<<"BIT 5, C"<<std::endl;
	}
	break;
	case 0x6a: {
		// BIT 5, D
		// Flags: Z01-
		bit(5, RegDE.hi);
		std::cout<<"BIT 5, D"<<std::endl;
	}
	break;
	case 0x6b: {
		// BIT 5, E
		// Flags: Z01-
		bit(5, RegDE.lo);
		std::cout<<"BIT 5, E"<<std::endl;
	}
	break;
	case 0x6c: {
		// BIT 5, H
		// Flags: Z01-
		bit(5, RegHL.hi);
		std::cout<<"BIT 5, H"<<std::endl;
	}
	break;
	case 0x6d: {
		// BIT 5, L
		// Flags: Z01-
		bit(5, RegHL.lo);
		std::cout<<"BIT 5, L"<<std::endl;
	}
	break;
	case 0x6e: {
		// BIT 5, (HL)
		// Flags: Z01-
		uint8_t hlVal = memory->readByte(RegHL.reg);
		bit(5, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"BIT 5, (HL)"<<std::endl;
	}
	break;
	case 0x6f: {
		// BIT 5, A
		// Flags: Z01-
		bit(5, RegAF.hi);
		std::cout<<"BIT 5, A"<<std::endl;
	}
	break;
	case 0x70: {
		// BIT 6, B
		// Flags: Z01-
		bit(6, RegBC.hi);
		std::cout<<"BIT 6, B"<<std::endl;
	}
	break;
	case 0x71: {
		// BIT 6, C
		// Flags: Z01-
		bit(6, RegBC.lo);
		std::cout<<"BIT 6, C"<<std::endl;
	}
	break;
	case 0x72: {
		// BIT 6, D
		// Flags: Z01-
		bit(6, RegDE.hi);
		std::cout<<"BIT 6, D"<<std::endl;
	}
	break;
	case 0x73: {
		// BIT 6, E
		// Flags: Z01-
		bit(6, RegDE.lo);
		std::cout<<"BIT 6, E"<<std::endl;
	}
	break;
	case 0x74: {
		// BIT 6, H
		// Flags: Z01-
		bit(6, RegHL.hi);
		std::cout<<"BIT 6, H"<<std::endl;
	}
	break;
	case 0x75: {
		// BIT 6, L
		// Flags: Z01-
		bit(6, RegHL.lo);
		std::cout<<"BIT 6, L"<<std::endl;
	}
	break;
	case 0x76: {
		// BIT 6, (HL)
		// Flags: Z01-
		uint8_t hlVal = memory->readByte(RegHL.reg);
		bit(6, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"BIT 6, (HL)"<<std::endl;
	}
	break;
	case 0x77: {
		// BIT 6, A
		// Flags: Z01-
		bit(6, RegAF.hi);
		std::cout<<"BIT 6, A"<<std::endl;
	}
	break;
	case 0x78: {
		// BIT 7, B
		// Flags: Z01-
		bit(7, RegBC.hi);
		std::cout<<"BIT 7, B"<<std::endl;
	}
	break;
	case 0x79: {
		// BIT 7, C
		// Flags: Z01-
		bit(7, RegBC.lo);
		std::cout<<"BIT 7, C"<<std::endl;
	}
	break;
	case 0x7a: {
		// BIT 7, D
		// Flags: Z01-
		bit(7, RegDE.hi);
		std::cout<<"BIT 7, D"<<std::endl;
	}
	break;
	case 0x7b: {
		// BIT 7, E
		// Flags: Z01-
		bit(7, RegDE.lo);
		std::cout<<"BIT 7, E"<<std::endl;
	}
	break;
	case 0x7c: {
		// BIT 7, H
		// Flags: Z01-
		bit(7, RegHL.hi);
		std::cout<<"BIT 7, H"<<std::endl;
	}
	break;
	case 0x7d: {
		// BIT 7, L
		// Flags: Z01-
		bit(7, RegHL.lo);
		std::cout<<"BIT 7, L"<<std::endl;
	}
	break;
	case 0x7e: {
		// BIT 7, (HL)
		// Flags: Z01-
		uint8_t hlVal = memory->readByte(RegHL.reg);
		bit(7, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"BIT 7, (HL)"<<std::endl;
	}
	break;
	case 0x7f: {
		// BIT 7, A
		// Flags: Z01-
		bit(7, RegAF.hi);
		std::cout<<"BIT 7, A"<<std::endl;
	}
	break;
	case 0x80: {
		// RES 0, B
		res(0, RegBC.hi);
		std::cout<<"RES 0, B"<<std::endl;
	}
	break;
	case 0x81: {
		// RES 0, C
		res(0, RegBC.lo);
		std::cout<<"RES 0, C"<<std::endl;
	}
	break;
	case 0x82: {
		// RES 0, D
		res(0, RegDE.hi);
		std::cout<<"RES 0, D"<<std::endl;
	}
	break;
	case 0x83: {
		// RES 0, E
		res(0, RegDE.lo);
		std::cout<<"RES 0, E"<<std::endl;
	}
	break;
	case 0x84: {
		// RES 0, H
		res(0, RegHL.hi);
		std::cout<<"RES 0, H"<<std::endl;
	}
	break;
	case 0x85: {
		// RES 0, L
		res(0, RegHL.lo);
		std::cout<<"RES 0, L"<<std::endl;
	}
	break;
	case 0x86: {
		// RES 0, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		res(0, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RES 0, (HL)"<<std::endl;
	}
	break;
	case 0x87: {
		// RES 0, A
		res(0, RegAF.hi);
		std::cout<<"RES 0, A"<<std::endl;
	}
	break;
	case 0x88: {
		// RES 1, B
		res(1, RegBC.hi);
		std::cout<<"RES 1, B"<<std::endl;
	}
	break;
	case 0x89: {
		// RES 1, C
		res(1, RegBC.lo);
		std::cout<<"RES 1, C"<<std::endl;
	}
	break;
	case 0x8a: {
		// RES 1, D
		res(1, RegDE.hi);
		std::cout<<"RES 1, D"<<std::endl;
	}
	break;
	case 0x8b: {
		// RES 1, E
		res(1, RegDE.lo);
		std::cout<<"RES 1, E"<<std::endl;
	}
	break;
	case 0x8c: {
		// RES 1, H
		res(1, RegHL.hi);
		std::cout<<"RES 1, H"<<std::endl;
	}
	break;
	case 0x8d: {
		// RES 1, L
		res(1, RegHL.lo);
		std::cout<<"RES 1, L"<<std::endl;
	}
	break;
	case 0x8e: {
		// RES 1, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		res(1, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RES 1, (HL)"<<std::endl;
	}
	break;
	case 0x8f: {
		// RES 1, A
		res(1, RegAF.hi);
		std::cout<<"RES 1, A"<<std::endl;
	}
	break;
	case 0x90: {
		// RES 2, B
		res(2, RegBC.hi);
		std::cout<<"RES 2, B"<<std::endl;
	}
	break;
	case 0x91: {
		// RES 2, C
		res(2, RegBC.lo);
		std::cout<<"RES 2, C"<<std::endl;
	}
	break;
	case 0x92: {
		// RES 2, D
		res(2, RegDE.hi);
		std::cout<<"RES 2, D"<<std::endl;
	}
	break;
	case 0x93: {
		// RES 2, E
		res(2, RegDE.lo);
		std::cout<<"RES 2, E"<<std::endl;
	}
	break;
	case 0x94: {
		// RES 2, H
		res(2, RegHL.hi);
		std::cout<<"RES 2, H"<<std::endl;
	}
	break;
	case 0x95: {
		// RES 2, L
		res(2, RegHL.lo);
		std::cout<<"RES 2, L"<<std::endl;
	}
	break;
	case 0x96: {
		// RES 2, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		res(2, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RES 2, (HL)"<<std::endl;
	}
	break;
	case 0x97: {
		// RES 2, A
		res(2, RegAF.hi);
		std::cout<<"RES 2, A"<<std::endl;
	}
	break;
	case 0x98: {
		// RES 3, B
		res(3, RegBC.hi);
		std::cout<<"RES 3, B"<<std::endl;
	}
	break;
	case 0x99: {
		// RES 3, C
		res(3, RegBC.lo);
		std::cout<<"RES 3, C"<<std::endl;
	}
	break;
	case 0x9a: {
		// RES 3, D
		res(3, RegDE.hi);
		std::cout<<"RES 3, D"<<std::endl;
	}
	break;
	case 0x9b: {
		// RES 3, E
		res(3, RegDE.lo);
		std::cout<<"RES 3, E"<<std::endl;
	}
	break;
	case 0x9c: {
		// RES 3, H
		res(3, RegHL.hi);
		std::cout<<"RES 3, H"<<std::endl;
	}
	break;
	case 0x9d: {
		// RES 3, L
		res(3, RegHL.lo);
		std::cout<<"RES 3, L"<<std::endl;
	}
	break;
	case 0x9e: {
		// RES 3, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		res(3, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RES 3, (HL)"<<std::endl;
	}
	break;
	case 0x9f: {
		// RES 3, A
		res(3, RegAF.hi);
		std::cout<<"RES 3, A"<<std::endl;
	}
	break;
	case 0xa0: {
		// RES 4, B
		res(4, RegBC.hi);
		std::cout<<"RES 4, B"<<std::endl;
	}
	break;
	case 0xa1: {
		// RES 4, C
		res(4, RegBC.lo);
		std::cout<<"RES 4, C"<<std::endl;
	}
	break;
	case 0xa2: {
		// RES 4, D
		res(4, RegDE.hi);
		std::cout<<"RES 4, D"<<std::endl;
	}
	break;
	case 0xa3: {
		// RES 4, E
		res(4, RegDE.lo);
		std::cout<<"RES 4, E"<<std::endl;
	}
	break;
	case 0xa4: {
		// RES 4, H
		res(4, RegHL.hi);
		std::cout<<"RES 4, H"<<std::endl;
	}
	break;
	case 0xa5: {
		// RES 4, L
		res(4, RegHL.lo);
		std::cout<<"RES 4, L"<<std::endl;
	}
	break;
	case 0xa6: {
		// RES 4, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		res(4, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RES 4, (HL)"<<std::endl;
	}
	break;
	case 0xa7: {
		// RES 4, A
		res(4, RegAF.hi);
		std::cout<<"RES 4, A"<<std::endl;
	}
	break;
	case 0xa8: {
		// RES 5, B
		res(5, RegBC.hi);
		std::cout<<"RES 5, B"<<std::endl;
	}
	break;
	case 0xa9: {
		// RES 5, C
		res(5, RegBC.lo);
		std::cout<<"RES 5, C"<<std::endl;
	}
	break;
	case 0xaa: {
		// RES 5, D
		res(5, RegDE.hi);
		std::cout<<"RES 5, D"<<std::endl;
	}
	break;
	case 0xab: {
		// RES 5, E
		res(5, RegDE.lo);
		std::cout<<"RES 5, E"<<std::endl;
	}
	break;
	case 0xac: {
		// RES 5, H
		res(5, RegHL.hi);
		std::cout<<"RES 5, H"<<std::endl;
	}
	break;
	case 0xad: {
		// RES 5, L
		res(5, RegHL.lo);
		std::cout<<"RES 5, L"<<std::endl;
	}
	break;
	case 0xae: {
		// RES 5, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		res(5, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RES 5, (HL)"<<std::endl;
	}
	break;
	case 0xaf: {
		// RES 5, A
		res(5, RegAF.hi);
		std::cout<<"RES 5, A"<<std::endl;
	}
	break;
	case 0xb0: {
		// RES 6, B
		res(6, RegBC.hi);
		std::cout<<"RES 6, B"<<std::endl;
	}
	break;
	case 0xb1: {
		// RES 6, C
		res(6, RegBC.lo);
		std::cout<<"RES 6, C"<<std::endl;
	}
	break;
	case 0xb2: {
		// RES 6, D
		res(6, RegDE.hi);
		std::cout<<"RES 6, D"<<std::endl;
	}
	break;
	case 0xb3: {
		// RES 6, E
		res(6, RegDE.lo);
		std::cout<<"RES 6, E"<<std::endl;
	}
	break;
	case 0xb4: {
		// RES 6, H
		res(6, RegHL.hi);
		std::cout<<"RES 6, H"<<std::endl;
	}
	break;
	case 0xb5: {
		// RES 6, L
		res(6, RegHL.lo);
		std::cout<<"RES 6, L"<<std::endl;
	}
	break;
	case 0xb6: {
		// RES 6, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		res(6, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RES 6, (HL)"<<std::endl;
	}
	break;
	case 0xb7: {
		// RES 6, A
		res(6, RegAF.hi);
		std::cout<<"RES 6, A"<<std::endl;
	}
	break;
	case 0xb8: {
		// RES 7, B
		res(7, RegBC.hi);
		std::cout<<"RES 7, B"<<std::endl;
	}
	break;
	case 0xb9: {
		// RES 7, C
		res(7, RegBC.lo);
		std::cout<<"RES 7, C"<<std::endl;
	}
	break;
	case 0xba: {
		// RES 7, D
		res(7, RegDE.hi);
		std::cout<<"RES 7, D"<<std::endl;
	}
	break;
	case 0xbb: {
		// RES 7, E
		res(7, RegDE.lo);
		std::cout<<"RES 7, E"<<std::endl;
	}
	break;
	case 0xbc: {
		// RES 7, H
		res(7, RegHL.hi);
		std::cout<<"RES 7, H"<<std::endl;
	}
	break;
	case 0xbd: {
		// RES 7, L
		res(7, RegHL.lo);
		std::cout<<"RES 7, L"<<std::endl;
	}
	break;
	case 0xbe: {
		// RES 7, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		res(7, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"RES 7, (HL)"<<std::endl;
	}
	break;
	case 0xbf: {
		// RES 7, A
		res(7, RegAF.hi);
		std::cout<<"RES 7, A"<<std::endl;
	}
	break;
	case 0xc0: {
		// SET 0, B
		set(0, RegBC.hi);
		std::cout<<"SET 0, B"<<std::endl;
	}
	break;
	case 0xc1: {
		// SET 0, C
		set(0, RegBC.lo);
		std::cout<<"SET 0, C"<<std::endl;
	}
	break;
	case 0xc2: {
		// SET 0, D
		set(0, RegDE.hi);
		std::cout<<"SET 0, D"<<std::endl;
	}
	break;
	case 0xc3: {
		// SET 0, E
		set(0, RegDE.lo);
		std::cout<<"SET 0, E"<<std::endl;
	}
	break;
	case 0xc4: {
		// SET 0, H
		set(0, RegHL.hi);
		std::cout<<"SET 0, H"<<std::endl;
	}
	break;
	case 0xc5: {
		// SET 0, L
		set(0, RegHL.lo);
		std::cout<<"SET 0, L"<<std::endl;
	}
	break;
	case 0xc6: {
		// SET 0, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		set(0, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SET 0, (HL)"<<std::endl;
	}
	break;
	case 0xc7: {
		// SET 0, A
		set(0, RegAF.hi);
		std::cout<<"SET 0, A"<<std::endl;
	}
	break;
	case 0xc8: {
		// SET 1, B
		set(1, RegBC.hi);
		std::cout<<"SET 1, B"<<std::endl;
	}
	break;
	case 0xc9: {
		// SET 1, C
		set(1, RegBC.lo);
		std::cout<<"SET 1, C"<<std::endl;
	}
	break;
	case 0xca: {
		// SET 1, D
		set(1, RegDE.hi);
		std::cout<<"SET 1, D"<<std::endl;
	}
	break;
	case 0xcb: {
		// SET 1, E
		set(1, RegDE.lo);
		std::cout<<"SET 1, E"<<std::endl;
	}
	break;
	case 0xcc: {
		// SET 1, H
		set(1, RegHL.hi);
		std::cout<<"SET 1, H"<<std::endl;
	}
	break;
	case 0xcd: {
		// SET 1, L
		set(1, RegHL.lo);
		std::cout<<"SET 1, L"<<std::endl;
	}
	break;
	case 0xce: {
		// SET 1, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		set(1, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SET 1, (HL)"<<std::endl;
	}
	break;
	case 0xcf: {
		// SET 1, A
		set(1, RegAF.hi);
		std::cout<<"SET 1, A"<<std::endl;
	}
	break;
	case 0xd0: {
		// SET 2, B
		set(2, RegBC.hi);
		std::cout<<"SET 2, B"<<std::endl;
	}
	break;
	case 0xd1: {
		// SET 2, C
		set(2, RegBC.lo);
		std::cout<<"SET 2, C"<<std::endl;
	}
	break;
	case 0xd2: {
		// SET 2, D
		set(2, RegDE.hi);
		std::cout<<"SET 2, D"<<std::endl;
	}
	break;
	case 0xd3: {
		// SET 2, E
		set(2, RegDE.lo);
		std::cout<<"SET 2, E"<<std::endl;
	}
	break;
	case 0xd4: {
		// SET 2, H
		set(2, RegHL.hi);
		std::cout<<"SET 2, H"<<std::endl;
	}
	break;
	case 0xd5: {
		// SET 2, L
		set(2, RegHL.lo);
		std::cout<<"SET 2, L"<<std::endl;
	}
	break;
	case 0xd6: {
		// SET 2, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		set(2, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SET 2, (HL)"<<std::endl;
	}
	break;
	case 0xd7: {
		// SET 2, A
		set(2, RegAF.hi);
		std::cout<<"SET 2, A"<<std::endl;
	}
	break;
	case 0xd8: {
		// SET 3, B
		set(3, RegBC.hi);
		std::cout<<"SET 3, B"<<std::endl;
	}
	break;
	case 0xd9: {
		// SET 3, C
		set(3, RegBC.lo);
		std::cout<<"SET 3, C"<<std::endl;
	}
	break;
	case 0xda: {
		// SET 3, D
		set(3, RegDE.hi);
		std::cout<<"SET 3, D"<<std::endl;
	}
	break;
	case 0xdb: {
		// SET 3, E
		set(3, RegDE.lo);
		std::cout<<"SET 3, E"<<std::endl;
	}
	break;
	case 0xdc: {
		// SET 3, H
		set(3, RegHL.hi);
		std::cout<<"SET 3, H"<<std::endl;
	}
	break;
	case 0xdd: {
		// SET 3, L
		set(3, RegHL.lo);
		std::cout<<"SET 3, L"<<std::endl;
	}
	break;
	case 0xde: {
		// SET 3, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		set(3, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SET 3, (HL)"<<std::endl;
	}
	break;
	case 0xdf: {
		// SET 3, A
		set(3, RegAF.hi);
		std::cout<<"SET 3, A"<<std::endl;
	}
	break;
	case 0xe0: {
		// SET 4, B
		set(4, RegBC.hi);
		std::cout<<"SET 4, B"<<std::endl;
	}
	break;
	case 0xe1: {
		// SET 4, C
		set(4, RegBC.lo);
		std::cout<<"SET 4, C"<<std::endl;
	}
	break;
	case 0xe2: {
		// SET 4, D
		set(4, RegDE.hi);
		std::cout<<"SET 4, D"<<std::endl;
	}
	break;
	case 0xe3: {
		// SET 4, E
		set(4, RegDE.lo);
		std::cout<<"SET 4, E"<<std::endl;
	}
	break;
	case 0xe4: {
		// SET 4, H
		set(4, RegHL.hi);
		std::cout<<"SET 4, H"<<std::endl;
	}
	break;
	case 0xe5: {
		// SET 4, L
		set(4, RegHL.lo);
		std::cout<<"SET 4, L"<<std::endl;
	}
	break;
	case 0xe6: {
		// SET 4, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		set(4, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SET 4, (HL)"<<std::endl;
	}
	break;
	case 0xe7: {
		// SET 4, A
		set(4, RegAF.hi);
		std::cout<<"SET 4, A"<<std::endl;
	}
	break;
	case 0xe8: {
		// SET 5, B
		set(5, RegBC.hi);
		std::cout<<"SET 5, B"<<std::endl;
	}
	break;
	case 0xe9: {
		// SET 5, C
		set(5, RegBC.lo);
		std::cout<<"SET 5, C"<<std::endl;
	}
	break;
	case 0xea: {
		// SET 5, D
		set(5, RegDE.hi);
		std::cout<<"SET 5, D"<<std::endl;
	}
	break;
	case 0xeb: {
		// SET 5, E
		set(5, RegDE.lo);
		std::cout<<"SET 5, E"<<std::endl;
	}
	break;
	case 0xec: {
		// SET 5, H
		set(5, RegHL.hi);
		std::cout<<"SET 5, H"<<std::endl;
	}
	break;
	case 0xed: {
		// SET 5, L
		set(5, RegHL.lo);
		std::cout<<"SET 5, L"<<std::endl;
	}
	break;
	case 0xee: {
		// SET 5, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		set(5, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SET 5, (HL)"<<std::endl;
	}
	break;
	case 0xef: {
		// SET 5, A
		set(5, RegAF.hi);
		std::cout<<"SET 5, A"<<std::endl;
	}
	break;
	case 0xf0: {
		// SET 6, B
		set(6, RegBC.hi);
		std::cout<<"SET 6, B"<<std::endl;
	}
	break;
	case 0xf1: {
		// SET 6, C
		set(6, RegBC.lo);
		std::cout<<"SET 6, C"<<std::endl;
	}
	break;
	case 0xf2: {
		// SET 6, D
		set(6, RegDE.hi);
		std::cout<<"SET 6, D"<<std::endl;
	}
	break;
	case 0xf3: {
		// SET 6, E
		set(6, RegDE.lo);
		std::cout<<"SET 6, E"<<std::endl;
	}
	break;
	case 0xf4: {
		// SET 6, H
		set(6, RegHL.hi);
		std::cout<<"SET 6, H"<<std::endl;
	}
	break;
	case 0xf5: {
		// SET 6, L
		set(6, RegHL.lo);
		std::cout<<"SET 6, L"<<std::endl;
	}
	break;
	case 0xf6: {
		// SET 6, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		set(6, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SET 6, (HL)"<<std::endl;
	}
	break;
	case 0xf7: {
		// SET 6, A
		set(6, RegAF.hi);
		std::cout<<"SET 6, A"<<std::endl;
	}
	break;
	case 0xf8: {
		// SET 7, B
		set(7, RegBC.hi);
		std::cout<<"SET 7, B"<<std::endl;
	}
	break;
	case 0xf9: {
		// SET 7, C
		set(7, RegBC.lo);
		std::cout<<"SET 7, C"<<std::endl;
	}
	break;
	case 0xfa: {
		// SET 7, D
		set(7, RegDE.hi);
		std::cout<<"SET 7, D"<<std::endl;
	}
	break;
	case 0xfb: {
		// SET 7, E
		set(7, RegDE.lo);
		std::cout<<"SET 7, E"<<std::endl;
	}
	break;
	case 0xfc: {
		// SET 7, H
		set(7, RegHL.hi);
		std::cout<<"SET 7, H"<<std::endl;
	}
	break;
	case 0xfd: {
		// SET 7, L
		set(7, RegHL.lo);
		std::cout<<"SET 7, L"<<std::endl;
	}
	break;
	case 0xfe: {
		// SET 7, (HL)
		uint8_t hlVal = memory->readByte(RegHL.reg);
		set(7, hlVal);
		memory->writeByte(RegHL.reg, hlVal);
		std::cout<<"SET 7, (HL)"<<std::endl;
	}
	break;
	case 0xff: {
		// SET 7, A
		set(7, RegAF.hi);
		std::cout<<"SET 7, A"<<std::endl;
	}
	break;
	default:
		std::cout << "invalid or unimplemented op code" << std::endl;
		break;
}